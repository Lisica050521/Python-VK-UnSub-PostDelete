import json
import time
import requests
import config
import sys
import os
from datetime import datetime, timedelta

def get_log_path():
    if getattr(sys, 'frozen', False):
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ exe
        return os.path.join(os.path.dirname(sys.executable), 'vk_limits.log')
    else:
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
        return os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vk_limits.log')

LOG_FILE = get_log_path()

VK_API_URL = 'https://api.vk.com/method/'

class GracefulInterrupt:
    def __init__(self):
        self.interrupted = False

    def handler(self):
        self.interrupted = True

def manage_limits(action, data=None):
    if action == 'read':
        try:
            with open(LOG_FILE, 'r') as f:
                limits = json.load(f)
            
            current_time = time.time()
            if current_time - limits['last_user_reset'] > 86400:
                limits['users_deleted'] = 0
                limits['last_user_reset'] = current_time
            if current_time - limits['last_post_reset'] > 3600:
                limits['posts_deleted'] = 0
                limits['last_post_reset'] = current_time
            
            return limits
        except (FileNotFoundError, json.JSONDecodeError):
            return {
                'users_deleted': 0,
                'posts_deleted': 0,
                'last_user_reset': int(time.time()),
                'last_post_reset': int(time.time())
            }
    elif action == 'write':
        with open(LOG_FILE, 'w') as f:
            json.dump(data, f, indent=2)

def vk_api_request(method, params, interrupt):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤"""
    params.update({
        'access_token': config.config["ACCESS_TOKEN"],
        'v': config.config["VERSION"],
        'timestamp': int(time.time()),
        'random_id': int(time.time() * 1000)
    })
    
    try:
        response = requests.get(VK_API_URL + method, params=params, timeout=30)
        result = response.json()
        
        if 'error' in result:
            error = result['error']
            error_code = error.get('error_code')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è –∏ Rate Limit
            if error_code in [9, 29]:
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: –Ω–∞—á–Ω–µ–º —Å 5 —Å–µ–∫, —É–¥–≤–∞–∏–≤–∞–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–≤—Ç–æ—Ä–µ (–º–∞–∫—Å 300 —Å–µ–∫)
                current_delay = getattr(vk_api_request, 'current_delay', 5)
                delay = min(current_delay * 2, 300) if error_code == 29 else 10
                vk_api_request.current_delay = delay
                
                print(f"‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({error['error_msg']}). –ü–∞—É–∑–∞ {delay} —Å–µ–∫...")
                for _ in range(delay):
                    if interrupt.interrupted:
                        print("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                        return None
                    time.sleep(1)
                
                return vk_api_request(method, params, interrupt)
            
            if error_code == 15:
                print("‚è© –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã. –£–¥–∞–ª–∏—Ç–µ —Å–µ–±—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
            else:
                print(f"‚õî –û—à–∏–±–∫–∞ API {error_code}: {error['error_msg']}")
            return None
            
        # –°–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        vk_api_request.current_delay = 5
        return result
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

def safe_delete_post(group_id, post_id, limits, interrupt):
    if interrupt.interrupted:
        return False
    if limits['posts_deleted'] >= config.config["MAX_POSTS_PER_HOUR"]:
        return False
    
    result = vk_api_request('wall.delete', {
        'owner_id': group_id,
        'post_id': post_id
    }, interrupt)  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä interrupt
    
    if result and 'response' in result and result['response'] == 1:
        limits['posts_deleted'] += 1
        time.sleep(config.config["DELAY"])
        return True
    return False

def safe_remove_user(group_id, user_id, limits, interrupt):
    if interrupt.interrupted:
        return False
        
    if limits['users_deleted'] >= config.config["MAX_USERS_PER_DAY"]:
        return False
    
    result = vk_api_request('groups.removeUser', {
        'group_id': abs(group_id),
        'user_id': user_id
    }, interrupt)
    
    if not result:
        return False
        
    if result.get('response') == 1:
        limits['users_deleted'] += 1
        time.sleep(config.config.get("REQUEST_DELAY", 3))
        return True
        
    error = result.get('error', {})
    error_code = error.get('error_code')
    
    if error_code in [15, 7]:  # –ê–¥–º–∏–Ω—ã/—Å–æ–∑–¥–∞—Ç–µ–ª–∏
        print(f"‚è© –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã. –£–¥–∞–ª–∏—Ç–µ —Å–µ–±—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
        return False
    elif error_code == 9:  # –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å
        delay = config.config.get("FLOOD_DELAY", 10)
        print(f"‚è≥ –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å. –ñ–¥–µ–º {delay} —Å–µ–∫...")
        time.sleep(delay)
        return safe_remove_user(group_id, user_id, limits, interrupt)
    else:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {user_id}: {error.get('error_msg', 'Unknown error')}")
        return False
    
def delete_posts(limits, interrupt):
    offset = 0
    count = 100
    deleted = 0
    max_attempts = 3
    attempts = 0
    
    while not interrupt.interrupted and attempts < max_attempts:
        if limits['posts_deleted'] >= config.config["MAX_POSTS_PER_HOUR"]:
            reset_time = datetime.fromtimestamp(limits['last_post_reset'] + 3600)
            print(f"\n–õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ {reset_time.strftime('%d.%m.%Y %H:%M')}")
            break
            
        response = vk_api_request('wall.get', {
            'owner_id': int(config.config["GROUP_ID"]),
            'count': count,
            'offset': offset
        }, interrupt)  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä interrupt
        
        if not response:
            attempts += 1
            time.sleep(5)
            continue
            
        if 'items' not in response.get('response', {}):
            print("\n–ü–æ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
            break
            
        items = response['response']['items']
        if not items:
            print("\n–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            break
            
        for post in items:
            if interrupt.interrupted or limits['posts_deleted'] >= config.config["MAX_POSTS_PER_HOUR"]:
                break
                
            if safe_delete_post(int(config.config["GROUP_ID"]), post['id'], limits, interrupt):
                deleted += 1
                print(f"–£–¥–∞–ª–µ–Ω –ø–æ—Å—Ç {post['id']} ({deleted} –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏)")
        
        offset += count
        attempts = 0
        
    return deleted

def remove_users(limits, interrupt):
    offset = 0
    count = min(100, config.config.get("MEMBERS_PER_REQUEST", 100))
    removed = 0
    retry_count = 0
    max_retries = config.config.get("API_RETRY_LIMIT", 3)
    creator_detected = False
    
    print("\n[2] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
    
    if limits['users_deleted'] >= config.config["MAX_USERS_PER_DAY"]:
        reset_time = datetime.fromtimestamp(limits['last_user_reset']) + timedelta(days=1)
        print(f"‚è≥ –õ–∏–º–∏—Ç —É–¥–∞–ª–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ {reset_time.strftime('%d.%m.%Y %H:%M')}")
        return 0
    
    while not interrupt.interrupted and retry_count < max_retries:
        if interrupt.interrupted:
            print("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ!")
            break
            
        response = vk_api_request('groups.getMembers', {
            'group_id': abs(int(config.config["GROUP_ID"])),
            'count': count,
            'offset': offset,
            'fields': 'role'
        }, interrupt)
        
        if not response:
            retry_count += 1
            time.sleep(5)
            continue
            
        if 'error' in response:
            error = response['error']
            print(f"‚õî –û—à–∏–±–∫–∞ API [{error['error_code']}]: {error['error_msg']}")
            retry_count += 1
            continue
            
        members = response.get('response', {}).get('items', [])
        if not members:
            if removed > 0:
                if creator_detected:
                    print("\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")
                    print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ —Å–µ–±—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑:")
                    print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º ‚Üí –£—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Üí –ò—Å–∫–ª—é—á–∏—Ç—å")
                else:
                    print("\n–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                    print("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")
                    print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ —Å–µ–±—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑:")
                    print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º ‚Üí –£—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Üí –ò—Å–∫–ª—é—á–∏—Ç—å")
            else:
                print("\n–í —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            break
            
        for member in members:
            if interrupt.interrupted:
                break
                
            user_id = member['id']
            role = member.get('role', 'member')
            
            if role == 'creator':
                creator_detected = True
                continue
                
            if safe_remove_user(int(config.config["GROUP_ID"]), user_id, limits, interrupt):
                removed += 1
                print(f"‚ùå –£–¥–∞–ª—ë–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ {user_id} ({removed}/{config.config['MAX_USERS_PER_DAY']})")
                
                if limits['users_deleted'] >= config.config["MAX_USERS_PER_DAY"]:
                    print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–¥–∞–ª–µ–Ω–∏–π!")
                    break
                    
        offset += len(members)
        retry_count = 0

    return removed

def main(interrupt):
    if getattr(sys, 'frozen', False):
        import shutil
        temp_dir = os.path.join(os.environ.get('TEMP', ''), 'vk_cleaner_cache')
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)

    try:
        limits = manage_limits('read')
        
        print("\n=== VK UnSub & PostDelete ===")
        print(f"–õ–∏–º–∏—Ç—ã:")
        print(f"üìù –ü–æ—Å—Ç–æ–≤: {limits['posts_deleted']}/{config.config['MAX_POSTS_PER_HOUR']} (—á–∞—Å)")
        print(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {limits['users_deleted']}/{config.config['MAX_USERS_PER_DAY']} (–¥–µ–Ω—å)")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤
        if not interrupt.interrupted:
            print("\n[1] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...")
            deleted_posts = delete_posts(limits, interrupt)
            print(f"\n–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {deleted_posts}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if not interrupt.interrupted:
            print("\n[2] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
            removed_users = remove_users(limits, interrupt)
            print(f"\n–£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {removed_users}")
            
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è!")
        interrupt.handler()
    except Exception as e:
        print(f"\nüî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if 'limits' in locals():
            manage_limits('write', limits)
            print("\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:")
            print(f"üìù –ü–æ—Å—Ç–æ–≤: {limits['posts_deleted']}/{config.config['MAX_POSTS_PER_HOUR']}")
            print(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {limits['users_deleted']}/{config.config['MAX_USERS_PER_DAY']}")
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
